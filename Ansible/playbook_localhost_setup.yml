# ansible-playbook -i hosts playbook_localhost_setup.yml

- name: Configure localhost (PRE)
  
  hosts: localhost
  connection: local

  # Set to no only during development
  gather_facts: yes

  vars_files:
    - vars/versions.yml
  
  pre_tasks:
  
  # Add comments only during development
    - name: apt-get update
      apt:
        update_cache: yes

    - name: Create partitions
      community.general.parted:
        device: '/dev/sda'
        number: 3
        part_type: primary
        part_start: 30031872s
        part_end: 100%
        state: present

    - name: Create a directory if it does not exist
      ansible.builtin.file:
        path: "{{paths.rpi_vault}}"
        state: directory
        mode: '0700'
        
    - name: Create sda3_crypt_keyfile
      ansible.builtin.shell: dd if=/dev/urandom of="{{paths.sda3_luks_keyfile}}" bs=1024 count=4
      args:
        creates: "{{paths.sda3_luks_keyfile}}"

    - name: Change file ownership, group and permissions of sda3_crypt_keyfile
      ansible.builtin.file:
        path: "{{paths.sda3_luks_keyfile}}"
        owner: root
        group: root
        mode: '0400'

    - name: Create sda3 LUKS container (remains unchanged if it already exists)
      community.crypto.luks_device:
        device: "/dev/sda3"
        cipher: "xchacha20,aes-adiantum-plain64"
        keyfile: "{{paths.sda3_luks_keyfile}}"
        state: "present"

    - name: Open the LUKS container; name it "sda3_crypt"
      community.crypto.luks_device:
        device: "/dev/sda3"
        name: "sda3_crypt"
        keyfile: "{{paths.sda3_luks_keyfile}}"
        state: "opened"
    
    - name: "Get UUID for partition"
      ansible.builtin.shell: blkid -s UUID -o value /dev/sda3
      register: disk_blkid
      changed_when: False

    - debug: var=disk_blkid.stdout

    - name: Set the options explicitly a device which must already exist
      community.general.crypttab:
        backing_device: "UUID={{ disk_blkid.stdout }}"
        name: sda3_crypt
        password: "{{paths.sda3_luks_keyfile}}"
        opts: luks
        state: present

    - name: Create a ext4 filesystem on sda3_crypt
      community.general.filesystem:
        fstype: ext4
        dev: /dev/mapper/sda3_crypt

    - name: Create docker directory if it does not exist
      ansible.builtin.file:
        path: /var/lib/docker
        state: directory
      register: create_docker_dir

    - name: Ensure /var/lib/docker is immutable (only after creation).
      ansible.builtin.file:
        path: /var/lib/docker
        attr: +i
      register: chattr_docker_dir
      changed_when: "'i' not in chattr_docker_dir.diff.before.attributes"
      when: create_docker_dir.changed

    - name: Mount /var/lib/docker
      ansible.posix.mount:
        path: /var/lib/docker
        src: /dev/mapper/sda3_crypt
        fstype: ext4
        opts: defaults,noatime
        state: mounted

    #
    # Setup the SD card
    #

    - name: Check that the microsd exists
      stat:
        path: /dev/mmcblk0
      register: microsd_drive

    - name: Create partitions on the microsd
      community.general.parted:
        device: '/dev/mmcblk0'
        number: 1
        part_type: primary
        part_start: 0%
        part_end: 100%
        state: present
      when: microsd_drive.stat.exists
    
    - name: Create a fat filesystem on the microsd
      community.general.filesystem:
        fstype: vfat
        dev: /dev/mmcblk0p1
      when: microsd_drive.stat.exists
    
    - name: Create backup directory if it does not exist
      ansible.builtin.file:
        path: "{{paths.backups}}"
        state: directory
      when: microsd_drive.stat.exists

    - name: Mount backup directory
      ansible.posix.mount:
        path: "{{paths.backups}}"
        src: /dev/mmcblk0p1
        fstype: vfat
        opts: defaults,uid=1000,gid=1000,noatime,nofail
        state: mounted
      when: microsd_drive.stat.exists
  
  roles:
    - swap
    - ufw
    - utils